{"version":3,"sources":["components/Loading.jsx","components/CovidMap.jsx","tasks/LoadNationalTask.js","components/NationalStats.jsx","components/Legend.jsx","entities/LegendItem.js","entities/LegendItems.js","components/Footer.jsx","tasks/LoadStatesTask.js","components/Main.jsx","App.js","index.js"],"names":["Loading","style","height","display","justifyContent","alignItems","className","role","SetWindowListeners","map","useMap","window","addEventListener","width","document","documentElement","clientWidth","bar","getElementById","setZoom","CovidMap","country","useState","paneStats","highlight","fillColor","weight","opacity","MapContainer","center","zoom","scrollWheelZoom","maxZoom","zoomControl","interactive","dragging","doubleClickZoom","layers","L","tileLayer","attribution","GeoJSON","fillOpacity","color","dashArray","data","onEachFeature","state","layer","stateName","properties","STATE_NAME","confirmedText","recoveredText","deathsText","options","legendColor","on","setStyle","querySelector","innerHTML","content","e","bindPopup","id","LoadNationalTask","covid19DataUrl","setState","loadNational","papa","parse","download","header","complete","res","nationalData","pop","currentNationalCovidInfo","slice","length","NationalStats","dayBefore","national","day","numberWithCommas","num","toString","replace","ConfirmedStats","difference","Number","confirmed","RecoveredStats","recovered","DeathsStats","deaths","Legend","legendItems","item","backgroundColor","flex","textColor","fontWeight","textAlign","fontSize","title","LegendItem","isFor","this","cases","Footer","oldDateFormat","date","split","href","LoadStatesTask","loadStates","stateMap","stateCovidInfo","countryJSON","countryFeatures","default","features","currentStatesCovidInfo","Math","max","i","currentState","currentStateInfo","find","administrative_area_level_2","mapState","legendItem","Header","marginTop","Main","setCountry","setNational","legendItemsInReverse","reverse","useEffect","App","ReactDOM","render","StrictMode"],"mappings":"y8yOAyBeA,EAvBC,WACd,OACE,sBACEC,MAAO,CACLC,OAAQ,QACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UALhB,UAQE,qBAAKC,UAAU,8BAA8BC,KAAK,SAAlD,SACE,sBAAMD,UAAU,kBAAhB,0BAEF,qBAAKA,UAAU,6BAA6BC,KAAK,SAAjD,SACE,sBAAMD,UAAU,kBAAhB,0BAEF,qBAAKA,UAAU,2BAA2BC,KAAK,SAA/C,SACE,sBAAMD,UAAU,kBAAhB,8B,sDCbR,SAASE,IACP,IAAMC,EAAMC,cAwBZ,OAvBAC,OAAOC,iBAAiB,UAAU,WAChC,IAAIC,EAAQC,SAASC,gBAAgBC,YACjCC,EAAMH,SAASI,eAAe,aAC9BL,EAAQ,KACVJ,EAAIU,QAAQ,KACZF,EAAIhB,MAAME,QAAU,SAEpBM,EAAIU,QAAQ,KACZF,EAAIhB,MAAME,QAAU,YAIxBQ,OAAOC,iBAAiB,oBAAoB,WAC1C,IAAIC,EAAQC,SAASC,gBAAgBC,YACjCC,EAAMH,SAASI,eAAe,aAC9BL,EAAQ,KACVJ,EAAIU,QAAQ,KACZF,EAAIhB,MAAME,QAAU,SAEpBM,EAAIU,QAAQ,KACZF,EAAIhB,MAAME,QAAU,YAGjB,KAGT,IA6FeiB,EA7FE,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAClB,EAAkCC,mBAAS,oBAA3C,mBAAOC,EAAP,KASIC,GATJ,KASgB,CACdC,UAAW,UACXC,OAAQ,EACRC,QAAS,IAqDX,OACE,8BACE,eAACC,EAAA,EAAD,CACEC,OAAQ,EAAE,UAAW,YACrBC,KAAM,IACNC,iBAAiB,EACjBC,QAAS,IACTC,aAAa,EACbC,aAAa,EACbC,UAAU,EACVC,iBAAiB,EACjBC,OAAQ,CACNC,IAAEC,UAAU,GAAI,CACdC,YAAa,gDAXnB,UAeE,cAACC,EAAA,EAAD,CAASxC,MAjFE,CACfwB,UAAW,UACXiB,YAAa,EACbhB,OAAQ,EACRC,QAAS,EACTgB,MAAO,UACPC,UAAW,KA2EmBC,KAAMxB,EAASyB,cApE3B,SAACC,EAAOC,GAC1B,IAAIC,EAAYF,EAAMG,WAAWC,WAC3BC,EAAgBL,EAAMG,WAAWE,cACjCC,EAAgBN,EAAMG,WAAWG,cACjCC,EAAaP,EAAMG,WAAWI,WAEpCN,EAAMO,QAAQ9B,UAAYsB,EAAMG,WAAWP,MAE3C,IAAMa,EAAc,CAClB/B,UAAWsB,EAAMG,WAAWP,MAC5BD,YAAa,EACbhB,OAAQ,EACRC,QAAS,EACTgB,MAAO,UACPC,UAAW,KAGbI,EAAMS,GAAG,YAAY,WACnBT,EAAMU,SAASF,GACf1C,SAAS6C,cAAc,cAAcC,UAAY,sBAGnD,IAAIC,EAAO,4DAEHZ,EAFG,0HAKqCG,EALrC,6HAQoCC,EARpC,+HAYkCC,EAZlC,qCAkBXN,EAAMS,GAAG,aAAa,WACpBT,EAAMU,SAASlC,GACfV,SAAS6C,cAAc,cAAcC,UAAYC,KAGnDb,EAAMS,GAAG,SAAS,SAAUK,GAC1BhD,SAAS6C,cAAc,cAAcC,UAAY,mBACjDZ,EAAMU,SAASlC,MAEjBwB,EAAMe,UAAUF,MAoBZ,cAACrD,EAAD,IACA,qBAAKwD,GAAG,YAAY1D,UAAU,cAA9B,SACGiB,U,4DC7FI0C,E,iDAxBbC,eACE,oG,KAEFC,SAAW,K,KAEXC,aAAe,SAACD,GACd,EAAKA,SAAWA,EAChBE,IAAKC,MAAM,EAAKJ,eAAgB,CAC9BK,UAAU,EACVC,QAAQ,EACRC,SAAU,SAACC,GAAD,mBAAS,EAAT,MAAoBA,EAAI7B,U,gDAI9B,SAAC8B,GACPA,EAAaC,MACb,IAAIC,EAA2BF,EAAaG,MAC1CH,EAAaI,OAAS,EACtBJ,EAAaI,QAEf,EAAKZ,SAASU,OC8DHG,G,MAlFO,SAACnC,GACrB,IAAMoC,EAAYpC,EAAKqC,SAAS,GAC1BC,EAAMtC,EAAKqC,SAAS,GAEpBE,EAAmB,SAACC,GACxB,OAAOA,EAAIC,WAAWC,QAAQ,wBAAyB,MAEnDC,EAAiB,WACrB,IAAIC,EAAaC,OAAOP,EAAIQ,WAAaD,OAAOT,EAAUU,WAC1D,OAAIF,EAAa,EAEb,uBAAMnF,UAAU,aAAhB,cACG,sBAAM0D,GAAG,gBAAT,SAA0BoB,EAAiBK,KAD9C,yBAEkB,OAIb,sBAAMnF,UAAU,aAAhB,2CAGLsF,EAAiB,WACrB,IAAIH,EAAaC,OAAOP,EAAIU,WAAaH,OAAOT,EAAUY,WAE1D,OAAIJ,EAAa,EAEb,uBAAMnF,UAAU,aAAhB,cACG,sBAAM0D,GAAG,gBAAT,SAA0BoB,EAAiBK,KAAoB,IADlE,6BAE6B,OAK7B,sBAAMnF,UAAU,aAAhB,gDAIAwF,EAAc,WAClB,IAAIL,EAAaC,OAAOP,EAAIY,QAAUL,OAAOT,EAAUc,QACvD,OAAIN,EAAa,EAEb,uBAAMnF,UAAU,aAAhB,cACG,sBAAM0D,GAAG,aAAT,SAAuBoB,EAAiBK,KAD3C,0BAEe,OAIV,sBAAMnF,UAAU,aAAhB,4CAGX,OACE,sBAAK0D,GAAG,MAAR,UACE,sBAAKA,GAAG,iBAAR,UACE,+BACE,4CAEF,sBAAMA,GAAG,YAAT,SAAsBoB,EAAiBD,EAAIQ,aAC3C,qBAAK3B,GAAG,oBAAR,SACE,cAACwB,EAAD,SAGJ,sBAAKxB,GAAG,iBAAR,UACE,+BACE,4CAEF,sBAAMA,GAAG,YAAT,SAAsBoB,EAAiBD,EAAIU,aAC3C,qBAAK7B,GAAG,oBAAR,SACE,cAAC4B,EAAD,SAGJ,sBAAK5B,GAAG,cAAR,UACE,+BACE,yCAEF,sBAAMA,GAAG,SAAT,SAAmBoB,EAAiBD,EAAIY,UACxC,qBAAK/B,GAAG,iBAAR,SACE,cAAC8B,EAAD,cC7CKE,EA/BA,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAChB,OACE,qBACEhG,MAAO,CACLE,QAAS,OACTE,WAAY,WAHhB,SAMG4F,EAAYxF,KAAI,SAACyF,GAAD,OACf,qBAEEjG,MAAO,CACLkG,gBAAiBD,EAAKvD,MACtByD,KAAM,EACNjG,QAAS,OACTE,WAAY,SACZD,eAAgB,SAChBuC,MAAOuD,EAAKG,UACZnG,OAAQ,MACRoG,WAAY,MACZC,UAAW,SACXC,SAAU,QAZd,SAeE,+BAAON,EAAKO,SAdPP,EAAKO,aCHLC,EARb,WAAYD,EAAO9D,EAAOgE,EAAON,GAAY,oBAC3CO,KAAKH,MAAQA,EACbG,KAAKjE,MAAQA,EACbiE,KAAKD,MAAQA,EACbC,KAAKP,UAAyB,MAAbA,EAAoBA,EAAY,SCmBtCJ,EAtBK,CAClB,IAAIS,EAAW,WAAY,WAAW,SAACG,GAAD,OAAWA,EAAQ,OAAQ,SACjE,IAAIH,EACF,iBACA,WACA,SAACG,GAAD,OAAWA,EAAQ,KAASA,GAAS,OACrC,SAEF,IAAIH,EACF,gBACA,WACA,SAACG,GAAD,OAAYA,EAAQ,IAAUA,GAAS,MACvC,SAEF,IAAIH,EACF,YACA,WACA,SAACG,GAAD,OAAYA,GAAS,EAAMA,GAAS,MACpC,UCEWC,G,MAnBA,SAACjE,GACd,IAAIkE,EAAgBlE,EAAKqC,SAAS,GAAG8B,KAAKC,MAAM,KAC5CD,EAAOD,EAAc,GAAK,IAAMA,EAAc,GAAK,IAAMA,EAAc,GAC3E,OACE,sBAAK/C,GAAG,eAAR,gCACqB,4BAAIgD,IACvB,qDACqB,IACnB,mBACE,aAAW,qCACXE,KAAK,wCAFP,wC,wHCmEOC,E,iDAzEbjD,eACE,2F,KAEFC,SAAW,K,KAEXiD,WAAa,SAACjD,GACZ,IAAI9C,EAAUgG,EACd,EAAKlD,SAAWA,EAChBE,IAAKC,MAAM,EAAKJ,eAAgB,CAC9BK,UAAU,EACVC,QAAQ,EACRC,SAAU,SAACC,GAAD,mBAAS,EAAT,MAAgCA,EAAI7B,KAAMxB,O,gDAIpC,SAACiG,EAAgBC,GACnC,IAAIC,EAAkBD,EAAYE,QAAQC,SAI1CJ,EAAe1C,MAKf,IAJA,IAAI+C,EAAyBL,EAAexC,MAC1C8C,KAAKC,IAAIP,EAAevC,OAAS,IAPgB,WAU1C+C,GACP,IAAMC,EAAeP,EAAgBM,GAC/BE,EAAmBL,EAAuBM,MAC9C,SAAClF,GAAD,OACEA,EAAMmF,8BACNH,EAAa7E,WAAWC,cAU5B,GAPA4E,EAAa7E,WAAWyC,UAAY,EACpCoC,EAAa7E,WAAW2C,UAAY,EACpCkC,EAAa7E,WAAW6C,OAAS,EACjCgC,EAAa7E,WAAWE,cAAgB,IACxC2E,EAAa7E,WAAWG,cAAgB,IACxC0E,EAAa7E,WAAWI,WAAa,IAEZ,OAArB0E,EAA2B,CAC7B,IAAMrC,EAAYD,OAAOsC,EAAiBrC,WAC1CoC,EAAa7E,WAAWyC,UAAYA,EACpCoC,EAAa7E,WAAWE,cAAxB,YACE,EADF,MACyBuC,GACzB,IAAME,EAAYH,OAAOsC,EAAiBnC,WAC1CkC,EAAa7E,WAAW2C,UAAYA,EACpCkC,EAAa7E,WAAWG,cAAxB,YACE,EADF,MACyBwC,GACzB,IAAME,EAASL,OAAOsC,EAAiBjC,QACvCgC,EAAa7E,WAAW6C,OAASA,EACjCgC,EAAa7E,WAAWI,WAAxB,YAAqC,EAArC,MAA4DyC,GAG9D,cAAI,GAAJ,GAAsBgC,IA7BfD,EAAI,EAAGA,EAAIN,EAAgBzC,OAAQ+C,IAAM,EAAzCA,GA+BT,EAAK3D,SAASqD,M,gDAGG,SAACW,GAClB,IAAMC,EAAanC,EAAYgC,MAAK,SAACG,GAAD,OAClCA,EAAWzB,MAAMwB,EAASjF,WAAWyC,cAErB,MAAdyC,IACFD,EAASjF,WAAWP,MAAQyF,EAAWzF,U,gDAIvB,SAAC0C,GACnB,OAAOA,EAAIC,WAAWC,QAAQ,wBAAyB,SChErD8C,EAAS,WACb,OACE,sBACEpI,MAAO,CACLE,QAAS,OACTC,eAAgB,SAChBkI,UAAW,OACX/B,UAAW,UALf,UAQE,mEACA,2BA0CSgC,EArCF,WACX,MAA8BjH,mBAAS,IAAvC,mBAAOD,EAAP,KAAgBmH,EAAhB,KACA,EAAgClH,mBAAS,IAAzC,mBAAO4D,EAAP,KAAiBuD,EAAjB,KACMC,EAAuB,YAAIzC,GAAa0C,UAiB9C,OALAC,qBAAU,YATW,IAAIzB,GACZC,WAAWoB,IAIG,IAAIvE,GACZG,aAAaqE,KAM7B,IAGD,8BACsB,IAAnBpH,EAAQ0D,QAAoC,IAApBG,EAASH,OAChC,cAAC,EAAD,IAEA,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAeG,SAAUA,IACzB,cAAC,EAAD,CAAU7D,QAASA,IACnB,cAAC,EAAD,CAAQ4E,YAAayC,IACrB,cAAC,EAAD,CAAQxD,SAAUA,UChDb2D,MAJf,WACE,OAAO,cAAC,EAAD,K,MCCTC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlI,SAASI,eAAe,W","file":"static/js/main.7821e520.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <div className=\"spinner-border text-success\" role=\"status\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n      <div className=\"spinner-border text-danger\" role=\"status\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n      <div className=\"spinner-border text-info\" role=\"status\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loading\r\n","import React, { useState } from \"react\"\r\nimport { MapContainer, GeoJSON, useMap } from \"react-leaflet\"\r\nimport \"leaflet/dist/leaflet.css\"\r\nimport \"./CovidMap.css\"\r\nimport L from \"leaflet\"\r\n\r\nfunction SetWindowListeners() {\r\n  const map = useMap()\r\n  window.addEventListener(\"resize\", () => {\r\n    let width = document.documentElement.clientWidth\r\n    let bar = document.getElementById(\"info-pane\")\r\n    if (width < 768) {\r\n      map.setZoom(3.3)\r\n      bar.style.display = \"none\"\r\n    } else {\r\n      map.setZoom(4.4)\r\n      bar.style.display = \"block\"\r\n    }\r\n  })\r\n\r\n  window.addEventListener(\"DOMContentLoaded\", () => {\r\n    let width = document.documentElement.clientWidth\r\n    let bar = document.getElementById(\"info-pane\")\r\n    if (width < 768) {\r\n      map.setZoom(3.3)\r\n      bar.style.display = \"none\"\r\n    } else {\r\n      map.setZoom(4.4)\r\n      bar.style.display = \"block\"\r\n    }\r\n  })\r\n  return null\r\n}\r\n\r\nconst CovidMap = ({ country }) => {\r\n  const [paneStats, setPaneStats] = useState(\"Hover to Inspect\")\r\n  const mapStyle = {\r\n    fillColor: \"#dbe2f0\",\r\n    fillOpacity: 1,\r\n    weight: 2,\r\n    opacity: 1,\r\n    color: \"#ffffff\",\r\n    dashArray: \"2\",\r\n  }\r\n  let highlight = {\r\n    fillColor: \"#1f2d47\",\r\n    weight: 2,\r\n    opacity: 1,\r\n  }\r\n  const onEachState = (state, layer) => {\r\n    let stateName = state.properties.STATE_NAME\r\n    const confirmedText = state.properties.confirmedText\r\n    const recoveredText = state.properties.recoveredText\r\n    const deathsText = state.properties.deathsText\r\n\r\n    layer.options.fillColor = state.properties.color\r\n\r\n    const legendColor = {\r\n      fillColor: state.properties.color,\r\n      fillOpacity: 1,\r\n      weight: 2,\r\n      opacity: 1,\r\n      color: \"#ffffff\",\r\n      dashArray: \"2\",\r\n    }\r\n\r\n    layer.on(\"mouseout\", () => {\r\n      layer.setStyle(legendColor)\r\n      document.querySelector(\"#info-pane\").innerHTML = \"Hover to Inspect\"\r\n    })\r\n\r\n    let content = `\r\n    <div style=\"text-align: center\">\r\n    <p><b>${stateName}</b> \r\n    \\n \r\n    <p style=\"font-weight: 300\"> Confirmed:\r\n    <span style=\"color: orange; font-weight: 500\">${confirmedText}</span>  \r\n    \\n \r\n    <p style=\"font-weight: 300\"> Recovered:\r\n    <span style=\"color: green; font-weight: 500\">${recoveredText} </span>  \r\n    \r\n    \\n \r\n    <p style=\"font-weight: 300\"> Deaths:\r\n    <span style=\"color: red; font-weight: 500\">${deathsText}</span>  \r\n    \r\n    </div>\r\n    `\r\n\r\n    // on mouseover highlight selected state and show that state's info\r\n    layer.on(\"mouseover\", () => {\r\n      layer.setStyle(highlight)\r\n      document.querySelector(\"#info-pane\").innerHTML = content\r\n    })\r\n\r\n    layer.on(\"click\", function (e) {\r\n      document.querySelector(\"#info-pane\").innerHTML = \"Hover to Inspect\"\r\n      layer.setStyle(highlight)\r\n    })\r\n    layer.bindPopup(content)\r\n  }\r\n  return (\r\n    <div>\r\n      <MapContainer\r\n        center={[-28.734968, 134.489563]}\r\n        zoom={4.4}\r\n        scrollWheelZoom={false}\r\n        maxZoom={4.4}\r\n        zoomControl={false}\r\n        interactive={false}\r\n        dragging={false}\r\n        doubleClickZoom={false}\r\n        layers={[\r\n          L.tileLayer(\"\", {\r\n            attribution: \"Map data &copy; OpenStreetMap contributors\",\r\n          }),\r\n        ]}\r\n      >\r\n        <GeoJSON style={mapStyle} data={country} onEachFeature={onEachState} />\r\n        <SetWindowListeners />\r\n        <div id=\"info-pane\" className=\"leaflet-bar\">\r\n          {paneStats}\r\n        </div>\r\n      </MapContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CovidMap\r\n","import papa from \"papaparse\"\r\n\r\nclass LoadNationalTask {\r\n  covid19DataUrl =\r\n    \"https://raw.githubusercontent.com/M3IT/COVID-19_Data/master/Data/COVID_AU_national_cumulative.csv\"\r\n\r\n  setState = null\r\n\r\n  loadNational = (setState) => {\r\n    this.setState = setState\r\n    papa.parse(this.covid19DataUrl, {\r\n      download: true,\r\n      header: true,\r\n      complete: (res) => this.#meme(res.data),\r\n    })\r\n  }\r\n\r\n  #meme = (nationalData) => {\r\n    nationalData.pop()\r\n    let currentNationalCovidInfo = nationalData.slice(\r\n      nationalData.length - 2,\r\n      nationalData.length\r\n    )\r\n    this.setState(currentNationalCovidInfo)\r\n  }\r\n}\r\n\r\nexport default LoadNationalTask\r\n","import React from \"react\"\r\nimport \"./NationalStats.css\"\r\n\r\nconst NationalStats = (data) => {\r\n  const dayBefore = data.national[0]\r\n  const day = data.national[1]\r\n\r\n  const numberWithCommas = (num) => {\r\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n  }\r\n  const ConfirmedStats = () => {\r\n    let difference = Number(day.confirmed) - Number(dayBefore.confirmed)\r\n    if (difference > 0) {\r\n      return (\r\n        <span className=\"difference\">\r\n          +<span id=\"new-confirmed\">{numberWithCommas(difference)}</span> cases\r\n          in the past day{\" \"}\r\n        </span>\r\n      )\r\n    } else {\r\n      return <span className=\"difference\">No new cases in the past day</span>\r\n    }\r\n  }\r\n  const RecoveredStats = () => {\r\n    let difference = Number(day.recovered) - Number(dayBefore.recovered)\r\n\r\n    if (difference > 0) {\r\n      return (\r\n        <span className=\"difference\">\r\n          +<span id=\"new-recovered\">{numberWithCommas(difference)}</span>{\" \"}\r\n          recoveries in the past day{\" \"}\r\n        </span>\r\n      )\r\n    } else {\r\n      return (\r\n        <span className=\"difference\">No new recoveries in the past day</span>\r\n      )\r\n    }\r\n  }\r\n  const DeathsStats = () => {\r\n    let difference = Number(day.deaths) - Number(dayBefore.deaths)\r\n    if (difference > 0) {\r\n      return (\r\n        <span className=\"difference\">\r\n          +<span id=\"new-deaths\">{numberWithCommas(difference)}</span> deaths in\r\n          the past day{\" \"}\r\n        </span>\r\n      )\r\n    } else {\r\n      return <span className=\"difference\">No new deaths in the past day</span>\r\n    }\r\n  }\r\n  return (\r\n    <div id=\"box\">\r\n      <div id=\"confirmed-card\">\r\n        <span>\r\n          <b>Confirmed</b>\r\n        </span>\r\n        <span id=\"confirmed\">{numberWithCommas(day.confirmed)}</span>\r\n        <div id=\"new-confirmed-box\">\r\n          <ConfirmedStats />\r\n        </div>\r\n      </div>\r\n      <div id=\"recovered-card\">\r\n        <span>\r\n          <b>Recovered</b>\r\n        </span>\r\n        <span id=\"recovered\">{numberWithCommas(day.recovered)}</span>\r\n        <div id=\"new-recovered-box\">\r\n          <RecoveredStats />\r\n        </div>\r\n      </div>\r\n      <div id=\"deaths-card\">\r\n        <span>\r\n          <b>Deaths</b>\r\n        </span>\r\n        <span id=\"deaths\">{numberWithCommas(day.deaths)}</span>\r\n        <div id=\"new-deaths-box\">\r\n          <DeathsStats />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NationalStats\r\n","import React from \"react\"\r\n\r\nconst Legend = ({ legendItems }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        alignItems: \"stretch\",\r\n      }}\r\n    >\r\n      {legendItems.map((item) => (\r\n        <div\r\n          key={item.title}\r\n          style={{\r\n            backgroundColor: item.color,\r\n            flex: 1,\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            color: item.textColor,\r\n            height: \"5vh\",\r\n            fontWeight: \"500\",\r\n            textAlign: \"center\",\r\n            fontSize: \"15px\",\r\n          }}\r\n        >\r\n          <span>{item.title}</span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Legend\r\n","class LegendItem {\r\n  constructor(title, color, isFor, textColor) {\r\n    this.title = title\r\n    this.color = color\r\n    this.isFor = isFor\r\n    this.textColor = textColor != null ? textColor : \"black\"\r\n  }\r\n}\r\n\r\nexport default LegendItem\r\n","import LegendItem from \"./LegendItem\"\r\n\r\nconst legendItems = [\r\n  new LegendItem(\"15,000 +\", \"#2e436b\", (cases) => cases > 15_000, \"white\"),\r\n  new LegendItem(\r\n    \"5,000 - 15,000\",\r\n    \"#4565a1\",\r\n    (cases) => cases > 5_000 && cases <= 15_000,\r\n    \"white\"\r\n  ),\r\n  new LegendItem(\r\n    \"1,000 - 5,000\",\r\n    \"#829bc9\",\r\n    (cases) => (cases > 1_000) & (cases <= 5_000),\r\n    \"black\"\r\n  ),\r\n  new LegendItem(\r\n    \"0 - 1,000\",\r\n    \"#c9d4e8\",\r\n    (cases) => (cases >= 0) & (cases <= 1_000),\r\n    \"black\"\r\n  ),\r\n]\r\n\r\nexport default legendItems\r\n","import React from \"react\"\r\nimport \"./Footer.css\"\r\n\r\nconst Footer = (data) => {\r\n  let oldDateFormat = data.national[1].date.split(\"-\")\r\n  let date = oldDateFormat[2] + \"-\" + oldDateFormat[1] + \"-\" + oldDateFormat[0]\r\n  return (\r\n    <div id=\"last-updated\">\r\n      Data last updated: <b>{date}</b>\r\n      <div>\r\n        Data sourced from:{\" \"}\r\n        <a\r\n          aria-label=\"covid data from covid19data.com.au\"\r\n          href=\"https://github.com/M3IT/COVID-19_Data\"\r\n        >\r\n          COVID19Data.com.au\r\n        </a>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import papa from \"papaparse\"\r\nimport * as stateMap from \"../data/australia.json\"\r\nimport legendItems from \"../entities/LegendItems\"\r\n\r\nclass LoadStatesTask {\r\n  covid19DataUrl =\r\n    \"https://raw.githubusercontent.com/M3IT/COVID-19_Data/master/Data/COVID_AU_cumulative.csv\"\r\n\r\n  setState = null\r\n\r\n  loadStates = (setState) => {\r\n    let country = stateMap\r\n    this.setState = setState\r\n    papa.parse(this.covid19DataUrl, {\r\n      download: true,\r\n      header: true,\r\n      complete: (res) => this.#processCovidData(res.data, country),\r\n    })\r\n  }\r\n\r\n  #processCovidData = (stateCovidInfo, countryJSON) => {\r\n    let countryFeatures = countryJSON.default.features\r\n\r\n    // removes last item which is an empty object\r\n    // stores last eight items of data that correspond to the most recent data of the eight states/territories\r\n    stateCovidInfo.pop()\r\n    let currentStatesCovidInfo = stateCovidInfo.slice(\r\n      Math.max(stateCovidInfo.length - 8)\r\n    )\r\n\r\n    for (let i = 0; i < countryFeatures.length; i++) {\r\n      const currentState = countryFeatures[i]\r\n      const currentStateInfo = currentStatesCovidInfo.find(\r\n        (state) =>\r\n          state.administrative_area_level_2 ===\r\n          currentState.properties.STATE_NAME\r\n      )\r\n\r\n      currentState.properties.confirmed = 0\r\n      currentState.properties.recovered = 0\r\n      currentState.properties.deaths = 0\r\n      currentState.properties.confirmedText = \"0\"\r\n      currentState.properties.recoveredText = \"0\"\r\n      currentState.properties.deathsText = \"0\"\r\n\r\n      if (currentStateInfo !== null) {\r\n        const confirmed = Number(currentStateInfo.confirmed)\r\n        currentState.properties.confirmed = confirmed\r\n        currentState.properties.confirmedText =\r\n          this.#numberWithCommas(confirmed)\r\n        const recovered = Number(currentStateInfo.recovered)\r\n        currentState.properties.recovered = recovered\r\n        currentState.properties.recoveredText =\r\n          this.#numberWithCommas(recovered)\r\n        const deaths = Number(currentStateInfo.deaths)\r\n        currentState.properties.deaths = deaths\r\n        currentState.properties.deathsText = this.#numberWithCommas(deaths)\r\n      }\r\n\r\n      this.#setCountryColor(currentState)\r\n    }\r\n    this.setState(countryFeatures)\r\n  }\r\n\r\n  #setCountryColor = (mapState) => {\r\n    const legendItem = legendItems.find((legendItem) =>\r\n      legendItem.isFor(mapState.properties.confirmed)\r\n    )\r\n    if (legendItem != null) {\r\n      mapState.properties.color = legendItem.color\r\n    }\r\n  }\r\n\r\n  #numberWithCommas = (num) => {\r\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n  }\r\n}\r\n\r\nexport default LoadStatesTask\r\n","import React, { useState, useEffect } from \"react\"\r\nimport Loading from \"./Loading\"\r\nimport CovidMap from \"./CovidMap\"\r\nimport LoadNationalTask from \"../tasks/LoadNationalTask\"\r\nimport NationalStats from \"./NationalStats\"\r\nimport Legend from \"./Legend\"\r\nimport legendItems from \"../entities/LegendItems\"\r\nimport Footer from \"./Footer\"\r\nimport LoadStatesTask from \"../tasks/LoadStatesTask\"\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        marginTop: \"1rem\",\r\n        textAlign: \"center\",\r\n      }}\r\n    >\r\n      <h1>COVID 19 Statistics for Australia</h1>\r\n      <hr />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Main = () => {\r\n  const [country, setCountry] = useState([])\r\n  const [national, setNational] = useState([])\r\n  const legendItemsInReverse = [...legendItems].reverse()\r\n\r\n  const loadStates = () => {\r\n    const loadStates = new LoadStatesTask()\r\n    loadStates.loadStates(setCountry)\r\n  }\r\n\r\n  const loadNational = () => {\r\n    const loadNationalTask = new LoadNationalTask()\r\n    loadNationalTask.loadNational(setNational)\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadStates()\r\n    loadNational()\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {country.length === 0 || national.length === 0 ? (\r\n        <Loading />\r\n      ) : (\r\n        <div>\r\n          <Header />\r\n          <NationalStats national={national} />\r\n          <CovidMap country={country} />\r\n          <Legend legendItems={legendItemsInReverse} />\r\n          <Footer national={national} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Main\r\n","import \"./App.css\"\nimport React from \"react\"\nimport Main from \"./components/Main\"\n\nfunction App() {\n  return <Main />\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}